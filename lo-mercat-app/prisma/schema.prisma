// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id       String    @id @unique @default(cuid())
  name     String
  birthday DateTime
  Stand    Stand[]
  Stock    Stock[]
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  Product  Product[]
}

model Market {
  id       String     @id @unique @default(cuid())
  name     String
  location String?
  schedule String?
  Stand    Stand[]
  type     MarketType
}

model Stand {
  id       String  @id @unique @default(cuid())
  market   Market? @relation(fields: [marketId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  marketId String?
  farmer   Farmer  @relation(fields: [farmerId], references: [id])
  farmerId String
  location String?
}

model Stock {
  id        String      @id @unique @default(cuid())
  quantity  Int
  cost      Int
  farmer    Farmer      @relation(fields: [farmerId], references: [id])
  farmerId  String
  product   Product     @relation(fields: [productId], references: [id])
  productId String
  OrderLine OrderLine[]
}

model Product {
  id       String  @id @unique @default(cuid())
  name     String
  Stock    Stock[]
  farmer   Farmer? @relation(fields: [farmerId], references: [id])
  farmerId String?
}

model OrderLine {
  id       String @id @unique @default(cuid())
  quantity Int
  cost     Int
  stock    Stock  @relation(fields: [stockId], references: [id])
  stockId  String
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
}

model Order {
  id         String      @id @unique @default(cuid())
  completed  Boolean
  OrderLine  OrderLine[]
  purchase   Purchase    @relation(fields: [purchaseId], references: [id])
  purchaseId String
}

model Purchase {
  id         String   @id @unique @default(cuid())
  created_at DateTime @default(now())
  Order      Order[]
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
}

// enum Gender {
//   Male
//   Female
//   Other
//   NoStatement
// }

model Customer {
  id       String     @id @unique @default(cuid())
  name     String
  birthday DateTime
  Purchase Purchase[]
  gender   String
  user     User       @relation(fields: [userId], references: [id])
  userId   String
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String     @unique
  emailVerified     DateTime?
  password          String
  image             String?
  accounts          Account[]
  sessions          Session[]
  role              Role       @default(USER)
  registration_time DateTime   @default(now())
  Farmer            Farmer[]
  Customer          Customer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  ADMIN
  USER
  FARMER
}

enum MarketType {
  PUBLIC
  PRIVATE
}
