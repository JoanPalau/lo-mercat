// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id                String    @id @unique @default(cuid())
  email             String    @unique
  password          String
  name              String
  registration_time DateTime  @default(now())
  birthday          DateTime
  market            Market    @relation(fields: [marketId], references: [name])
  marketId          String
  Stand             Stand[]
  Stock             Stock[]
  Product           Product[]
}

model Market {
  name       String   @id @unique
  location String?
  schedule String?
  Farmer   Farmer[]
  Stand    Stand[]
}

model Stand {
  id       String @id @unique @default(cuid())
  market   Market @relation(fields: [marketId], references: [name])
  marketId String
  farmer   Farmer @relation(fields: [farmerId], references: [id])
  farmerId String
}

model Stock {
  id        String  @id @unique @default(cuid())
  quantity  Int
  cost      Int
  farmer    Farmer  @relation(fields: [farmerId], references: [id])
  farmerId  String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Product {
  id               String      @id @unique @default(cuid())
  name             String
  Stock            Stock[]
  customby         Farmer?     @relation(fields: [custombyFarmerId], references: [id])
  custombyFarmerId String?
  OrderLine        OrderLine[]
}

model OrderLine {
  id        String  @id @unique @default(cuid())
  quantity  Int
  cost      Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Order {
  id         String      @id @unique @default(cuid())
  completed  Boolean
  OrderLine  OrderLine[]
  purchase   Purchase    @relation(fields: [purchaseId], references: [id])
  purchaseId String
}

model Purchase {
  id         String   @id @unique @default(cuid())
  created_at DateTime @default(now())
  Order      Order[]
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
}

// enum Gender {
//   Male
//   Female
//   Other
//   NoStatement
// }

model Customer {
  id       String     @id @unique @default(cuid())
  email    String     @unique
  password String
  name     String
  birthday DateTime
  Purchase Purchase[]
  gender   String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  role            Role             @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
enum Role {
  ADMIN
  USER
  FARMER
}